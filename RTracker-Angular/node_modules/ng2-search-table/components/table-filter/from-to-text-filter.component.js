"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var FromToTextFilterComponent = (function () {
    function FromToTextFilterComponent() {
        this.model = {};
        this.eventEmitter = new core_1.EventEmitter();
        this.isHidden = false;
    }
    FromToTextFilterComponent.prototype.ngOnInit = function () {
        this.termFromControl = new forms_1.FormControl();
        this.termToControl = new forms_1.FormControl();
        this.setValueChangeEmitter(this.termFromControl, this.model.multipleFilter[0].name);
        this.setValueChangeEmitter(this.termToControl, this.model.multipleFilter[1].name);
    };
    FromToTextFilterComponent.prototype.setValue = function (name, value) {
        if (this.model.multipleFilter[0].name === name) {
            this.fromTerm = value;
        }
        else if (this.model.multipleFilter[1].name === name) {
            this.toTerm = value;
        }
    };
    FromToTextFilterComponent.prototype.setVisibility = function (visible) {
        this.isHidden = !visible;
    };
    FromToTextFilterComponent.prototype.setValueChangeEmitter = function (control, controlName) {
        var _this = this;
        control.valueChanges.subscribe(function (newValue) {
            var value = (control === _this.termFromControl ? _this.fromTerm : _this.toTerm) || "";
            _this.eventEmitter.emit({
                value: value,
                model: _this.model,
                name: controlName
            });
        });
    };
    __decorate([
        core_1.HostBinding("hidden"), 
        __metadata('design:type', Boolean)
    ], FromToTextFilterComponent.prototype, "isHidden", void 0);
    FromToTextFilterComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "th[from-to-text-filter]",
            inputs: ["name", "model", "debounceMillSeconds"],
            outputs: ["eventEmitter"],
            template: "\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <input class=\"form-control input-sm\"\n               [formControl]=\"termFromControl\"\n               [(ngModel)]=\"fromTerm\"\n               placeholder=\"{{model.multipleFilter[0].placeholder}}\" />\n      </div>\n      <div class=\"col-xs-6\">\n        <input class=\"form-control input-sm\"\n               [formControl]=\"termToControl\"\n               [(ngModel)]=\"toTerm\"\n               placeholder=\"{{model.multipleFilter[1].placeholder}}\"/>\n      </div>\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], FromToTextFilterComponent);
    return FromToTextFilterComponent;
}());
exports.FromToTextFilterComponent = FromToTextFilterComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbS10by10ZXh0LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmcm9tLXRvLXRleHQtZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQW1ELGVBQWUsQ0FBQyxDQUFBO0FBQ25FLHNCQUEwQixnQkFBZ0IsQ0FBQyxDQUFBO0FBMEIzQztJQUFBO1FBRUUsVUFBSyxHQUFRLEVBQUUsQ0FBQztRQUNoQixpQkFBWSxHQUFRLElBQUksbUJBQVksRUFBRSxDQUFDO1FBRWhCLGFBQVEsR0FBWSxLQUFLLENBQUM7SUEyQ25ELENBQUM7SUFwQ0MsNENBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxtQkFBVyxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLG1CQUFXLEVBQUUsQ0FBQztRQUV2QyxJQUFJLENBQUMscUJBQXFCLENBQ3hCLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDbEMsQ0FBQztRQUNGLElBQUksQ0FBQyxxQkFBcUIsQ0FDeEIsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNsQyxDQUFDO0lBQ0osQ0FBQztJQUVELDRDQUFRLEdBQVIsVUFBUyxJQUFZLEVBQUUsS0FBVTtRQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRUQsaURBQWEsR0FBYixVQUFjLE9BQWdCO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDM0IsQ0FBQztJQUVPLHlEQUFxQixHQUE3QixVQUE4QixPQUFvQixFQUFFLFdBQW1CO1FBQXZFLGlCQVNDO1FBUkMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBQSxRQUFRO1lBQ3JDLElBQUksS0FBSyxHQUFHLENBQUMsT0FBTyxLQUFLLEtBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ25GLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO2dCQUNyQixLQUFLLEVBQUUsS0FBSztnQkFDWixLQUFLLEVBQUUsS0FBSSxDQUFDLEtBQUs7Z0JBQ2pCLElBQUksRUFBRSxXQUFXO2FBQ2xCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQTFDRDtRQUFDLGtCQUFXLENBQUMsUUFBUSxDQUFDOzsrREFBQTtJQTVCeEI7UUFBQyxnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSx5QkFBeUI7WUFDbkMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsQ0FBQztZQUNoRCxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDekIsUUFBUSxFQUFFLDhpQkFlVDtTQUNGLENBQUM7O2lDQUFBO0lBa0RGLGdDQUFDO0FBQUQsQ0FBQyxBQWhERCxJQWdEQztBQWhEWSxpQ0FBeUIsNEJBZ0RyQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmd9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge0Zvcm1Db250cm9sfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7VGFibGVGaWx0ZXJ9IGZyb20gXCIuL3RhYmxlLWZpbHRlclwiO1xuXG5AQ29tcG9uZW50KHtcbiAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgc2VsZWN0b3I6IFwidGhbZnJvbS10by10ZXh0LWZpbHRlcl1cIixcbiAgaW5wdXRzOiBbXCJuYW1lXCIsIFwibW9kZWxcIiwgXCJkZWJvdW5jZU1pbGxTZWNvbmRzXCJdLFxuICBvdXRwdXRzOiBbXCJldmVudEVtaXR0ZXJcIl0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC14cy02XCI+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiXG4gICAgICAgICAgICAgICBbZm9ybUNvbnRyb2xdPVwidGVybUZyb21Db250cm9sXCJcbiAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVwiZnJvbVRlcm1cIlxuICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7e21vZGVsLm11bHRpcGxlRmlsdGVyWzBdLnBsYWNlaG9sZGVyfX1cIiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXhzLTZcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0LXNtXCJcbiAgICAgICAgICAgICAgIFtmb3JtQ29udHJvbF09XCJ0ZXJtVG9Db250cm9sXCJcbiAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVwidG9UZXJtXCJcbiAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3ttb2RlbC5tdWx0aXBsZUZpbHRlclsxXS5wbGFjZWhvbGRlcn19XCIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5cbmV4cG9ydCBjbGFzcyBGcm9tVG9UZXh0RmlsdGVyQ29tcG9uZW50IGltcGxlbWVudHMgVGFibGVGaWx0ZXIge1xuICBuYW1lOiBzdHJpbmc7XG4gIG1vZGVsOiBhbnkgPSB7fTtcbiAgZXZlbnRFbWl0dGVyOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQEhvc3RCaW5kaW5nKFwiaGlkZGVuXCIpIGlzSGlkZGVuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgZnJvbVRlcm06IHN0cmluZztcbiAgdG9UZXJtOiBzdHJpbmc7XG4gIHRlcm1Gcm9tQ29udHJvbDogRm9ybUNvbnRyb2w7XG4gIHRlcm1Ub0NvbnRyb2w6IEZvcm1Db250cm9sO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudGVybUZyb21Db250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG4gICAgdGhpcy50ZXJtVG9Db250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cbiAgICB0aGlzLnNldFZhbHVlQ2hhbmdlRW1pdHRlcihcbiAgICAgIHRoaXMudGVybUZyb21Db250cm9sLFxuICAgICAgdGhpcy5tb2RlbC5tdWx0aXBsZUZpbHRlclswXS5uYW1lXG4gICAgKTtcbiAgICB0aGlzLnNldFZhbHVlQ2hhbmdlRW1pdHRlcihcbiAgICAgIHRoaXMudGVybVRvQ29udHJvbCxcbiAgICAgIHRoaXMubW9kZWwubXVsdGlwbGVGaWx0ZXJbMV0ubmFtZVxuICAgICk7XG4gIH1cblxuICBzZXRWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb2RlbC5tdWx0aXBsZUZpbHRlclswXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0aGlzLmZyb21UZXJtID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLm1vZGVsLm11bHRpcGxlRmlsdGVyWzFdLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHRoaXMudG9UZXJtID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgc2V0VmlzaWJpbGl0eSh2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5pc0hpZGRlbiA9ICF2aXNpYmxlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRWYWx1ZUNoYW5nZUVtaXR0ZXIoY29udHJvbDogRm9ybUNvbnRyb2wsIGNvbnRyb2xOYW1lOiBzdHJpbmcpIHtcbiAgICBjb250cm9sLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUobmV3VmFsdWUgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gKGNvbnRyb2wgPT09IHRoaXMudGVybUZyb21Db250cm9sID8gdGhpcy5mcm9tVGVybSA6IHRoaXMudG9UZXJtKSB8fCBcIlwiO1xuICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgIG5hbWU6IGNvbnRyb2xOYW1lXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19