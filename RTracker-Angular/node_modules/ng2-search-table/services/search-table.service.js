"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var SearchTableService = (function () {
    function SearchTableService(http) {
        this.http = http;
    }
    // [Sort Params]
    // {
    //    "something": "desc",
    //    "another": "asc"
    // }
    //
    // [Filter Params]
    // {
    //    "something": "someValue",
    //    "another": "1"
    // }
    SearchTableService.prototype.search = function (searchUrl, options) {
        var page = options && options.page || 1;
        var per = options && options.per || 20;
        var sort = options && options.sort;
        var filter = options && options.filter;
        var searchParams = new http_1.URLSearchParams();
        searchParams.set("page", page.toString());
        searchParams.set("per", per.toString());
        if (sort) {
            Object.keys(sort).forEach(function (key) {
                searchParams.set("sort[" + key + "]", sort[key]);
            });
        }
        if (filter) {
            Object.keys(filter).forEach(function (key) {
                searchParams.set("filter[" + key + "]", filter[key]);
            });
        }
        var requestOptions = new http_1.RequestOptions({
            search: searchParams
        });
        return this
            .http
            .get(searchUrl, requestOptions)
            .map(function (r) { return r.json(); })
            .map(function (r) {
            return {
                page: r.page,
                per: r.per,
                totalCount: r.totalCount,
                results: r.results
            };
        });
    };
    SearchTableService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], SearchTableService);
    return SearchTableService;
}());
exports.SearchTableService = SearchTableService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWFyY2gtdGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQXlCLGVBQWUsQ0FBQyxDQUFBO0FBQ3pDLHFCQUFvRCxlQUFlLENBQUMsQ0FBQTtBQUdwRTtJQUNFLDRCQUFvQixJQUFVO1FBQVYsU0FBSSxHQUFKLElBQUksQ0FBTTtJQUM5QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLElBQUk7SUFDSiwwQkFBMEI7SUFDMUIsc0JBQXNCO0lBQ3RCLElBQUk7SUFDSixFQUFFO0lBQ0Ysa0JBQWtCO0lBQ2xCLElBQUk7SUFDSiwrQkFBK0I7SUFDL0Isb0JBQW9CO0lBQ3BCLElBQUk7SUFDRyxtQ0FBTSxHQUFiLFVBQWMsU0FBaUIsRUFBRSxPQUFhO1FBQzVDLElBQUksSUFBSSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUN4QyxJQUFJLEdBQUcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDdkMsSUFBSSxJQUFJLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDbkMsSUFBSSxNQUFNLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDdkMsSUFBSSxZQUFZLEdBQW9CLElBQUksc0JBQWUsRUFBRSxDQUFDO1FBQzFELFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQVE7Z0JBQ2pDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBVztnQkFDdEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLGNBQWMsR0FBRyxJQUFJLHFCQUFjLENBQUM7WUFDdEMsTUFBTSxFQUFFLFlBQVk7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUk7YUFDUixJQUFJO2FBQ0osR0FBRyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUM7YUFDOUIsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFSLENBQVEsQ0FBQzthQUNsQixHQUFHLENBQUMsVUFBQSxDQUFDO1lBQ0osTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtnQkFDWixHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUc7Z0JBQ1YsVUFBVSxFQUFFLENBQUMsQ0FBQyxVQUFVO2dCQUN4QixPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU87YUFDbkIsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQWxESDtRQUFDLGlCQUFVLEVBQUU7OzBCQUFBO0lBbURiLHlCQUFDO0FBQUQsQ0FBQyxBQWxERCxJQWtEQztBQWxEWSwwQkFBa0IscUJBa0Q5QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtIdHRwLCBVUkxTZWFyY2hQYXJhbXMsIFJlcXVlc3RPcHRpb25zfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VhcmNoVGFibGVTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwKSB7XG4gIH1cblxuICAvLyBbU29ydCBQYXJhbXNdXG4gIC8vIHtcbiAgLy8gICAgXCJzb21ldGhpbmdcIjogXCJkZXNjXCIsXG4gIC8vICAgIFwiYW5vdGhlclwiOiBcImFzY1wiXG4gIC8vIH1cbiAgLy9cbiAgLy8gW0ZpbHRlciBQYXJhbXNdXG4gIC8vIHtcbiAgLy8gICAgXCJzb21ldGhpbmdcIjogXCJzb21lVmFsdWVcIixcbiAgLy8gICAgXCJhbm90aGVyXCI6IFwiMVwiXG4gIC8vIH1cbiAgcHVibGljIHNlYXJjaChzZWFyY2hVcmw6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IGFueSB7XG4gICAgbGV0IHBhZ2UgPSBvcHRpb25zICYmIG9wdGlvbnMucGFnZSB8fCAxO1xuICAgIGxldCBwZXIgPSBvcHRpb25zICYmIG9wdGlvbnMucGVyIHx8IDIwO1xuICAgIGxldCBzb3J0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnNvcnQ7XG4gICAgbGV0IGZpbHRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5maWx0ZXI7XG4gICAgbGV0IHNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHNlYXJjaFBhcmFtcy5zZXQoXCJwYWdlXCIsIHBhZ2UudG9TdHJpbmcoKSk7XG4gICAgc2VhcmNoUGFyYW1zLnNldChcInBlclwiLCBwZXIudG9TdHJpbmcoKSk7XG4gICAgaWYgKHNvcnQpIHtcbiAgICAgIE9iamVjdC5rZXlzKHNvcnQpLmZvckVhY2goKGtleTogYW55KSA9PiB7XG4gICAgICAgIHNlYXJjaFBhcmFtcy5zZXQoXCJzb3J0W1wiICsga2V5ICsgXCJdXCIsIHNvcnRba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGZpbHRlcikge1xuICAgICAgT2JqZWN0LmtleXMoZmlsdGVyKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBzZWFyY2hQYXJhbXMuc2V0KFwiZmlsdGVyW1wiICsga2V5ICsgXCJdXCIsIGZpbHRlcltrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0T3B0aW9ucyA9IG5ldyBSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICBzZWFyY2g6IHNlYXJjaFBhcmFtc1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzXG4gICAgICAuaHR0cFxuICAgICAgLmdldChzZWFyY2hVcmwsIHJlcXVlc3RPcHRpb25zKVxuICAgICAgLm1hcChyID0+IHIuanNvbigpKVxuICAgICAgLm1hcChyID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYWdlOiByLnBhZ2UsXG4gICAgICAgICAgcGVyOiByLnBlcixcbiAgICAgICAgICB0b3RhbENvdW50OiByLnRvdGFsQ291bnQsXG4gICAgICAgICAgcmVzdWx0czogci5yZXN1bHRzXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxufVxuIl19